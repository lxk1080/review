三、 一 M 二 M
--
页面布局
CSS盒模型
DOM事件
HTTP协议
面向对象
原型链
通信、安全、算法

1、三栏布局 ....................................................................
--
float（兼容性好，要处理浮动问题）
absolute（脱离文档流，不建议采用）
flex（最完美，高度可以不固定）
table（兼容性好，高度可以不固定）
grid（网格布局）

2、CSS盒模型 ............................................................................
--
标准模型 + IE模型
content-box （标准模型）
border-box （IE模型）

--js设置获取盒模型对应的宽高
--
el.style.width/height （只能取到内联的样式）
el.currentStyle.width/height （只有IE支持）
window.getComputedStyle(el).width （兼容谷歌、火狐）
el.getBoundingClientRect().width（获取宽高 以及 元素的各个边到视窗左上的距离）

--边距重叠的情况
--
1、父子元素上下边距重叠
2、兄弟元素上下边距重叠
3、空元素上下边距重叠

BFC (块级格式化上下文)
--
BFC原理（渲染规则）
 1. BFC内的垂直方向会发生边距重叠
 2. BFC不会与浮动的元素重叠
 3. BFC是一个独立的容器，它外面的元素不会影响里面的，反之亦然
 4. BFC元素计算高度时，子元素即使是float也会参与计算
创建BFC
 1. float的值不为none
 2. position的值不为static或relative
 3. display属性为inline-block、table-cell、flex等等
 4. overflow不为visible
 
3、DOM事件  .........................................................................................
 	--DOM事件的级别
 		--DOM0
 			el.onclick = function(){}
 			// 友情提示：DOM1没有对事件方面的增加
 		--DOM2
 			el.addEventListener('click', function(){}, false) // 默认捕获事件, false代表冒泡
 		--DOM3
 			el.addEventListener('keyup', function(){}, false) // 相对于DOM2增加了许多事件
 			
 	--DOM事件模型（捕获、冒泡）
 	
 	--DOM事件流
 		1. 捕获
 		2. 目标阶段
 		3. 冒泡
 		-- 事件通过捕获到达目标元素，再从目标元素冒泡到window对象
 	
 	--DOM事件捕获的具体流程
 		-- window --> document --> html --> body --> ... --> 目标元素
 	
 	--Event对象的常见应用
 		event.preventDefault() // 阻止默认事件
 		event.stopPropagation() // 阻止冒泡
 		event.stopImmediatePropagation() // 事件响应优先级（例如为一个DOM元素绑定两个响应函数，那么在一个响应函数中使用该方法可以阻止其他的响应函数）
 		event.currentTarget // 通过事件代理（事件委托）方式绑定事件的情况， 可以得到用作事件代理的父级元素
 		event.target // 当前被点击的元素
 	
 	--自定义事件
		var event = new Event('custom')
		el.addEventListener('custom', function(){
			console.log('this is a custom event!')
		})
		el.dispatchEvent(event)



